# These blocks (http{}, server{}, etc) are called contexts
http {

    # we include mime.types so that content served is served in the correct format    
    include mime.types;

    # for load balancing, we use upstream to setup the servers that will be alternated
    # for this we're considering that we have 4 instances of a server
    #   each running on port 1111, 2222, 3333, 4444 respectively
    #   We use the dockerfile for that, and launch 4 instances of the image
    upstream backend_server {
        server 127.0.0.1:1111;
        server 127.0.0.1:2222;
        server 127.0.0.1:3333;
        server 127.0.0.1:4444;
    }

    server {
        # These lines (include mime.types, listen 8080, etc) are called directives
        listen 8080;
        # directory where we have our index.html file
        root E:\CompSci\learning_nginx;

        # to implement the loadbalancing, we tell NGINX which servers to use
        # we use location /, which will implement the loadbalancing when accessing the root page
        location / {
            proxy_pass http://backend_server/;
            proxy_set_header X-Backend-Port $server_port;
        }

        # to reach any 'location' go to
        # localhost:8080/location, for example, the first one will be
        # localhost:8080/fruits, which will serve the index.html file in E:\CompSci\learning_nginx\fruits

        # By default, nginx will serve the index.html file found at root
        # but if we add a location, it will append the location to the root
        # so here it will serve the index.html file found in E:\CompSci\learning_nginx\fruits;
        location /fruits {
            root E:\CompSci\learning_nginx;
        }

        # you can also use the 'alias' keyword, this means the location won't be appended
        # and you can use it to serve specific content at a location
        location /carbs {
            # localhost:8080/carbs/ will also serve the index.html inside the fruits dir
            alias E:\CompSci\learning_nginx\fruits;
        }

        # nginx looks for an index.html file by default
        # if the file is named differently, we can use try_files to specify that
        location /vegetables {
            root E:\CompSci\learning_nginx;
            # try veggies.html, if that's missing use the root index.html, if that's missing return a 404
            try_files /vegetables/veggies.html /index.html =404;
        }

        # To redirect we use return 307 /location
        # If you visit localhost:8080/crops, it will redirect to localhost:8080/fruits
        location /crops {
            # 307 is HTTP code that will redirect
            return 307 /fruits;
        }

        # You can use RegEx to the location context
        location ~* /count/[0-9] {
            root E:\CompSci\learning_nginx;
            try_files /index.html =404;
        }

        # We can also rewrite instead of redirecting if we don't want the URL to change
        # We use the capture group (\w+), and then refer to it with $1
        # Meaning that when a user visits localhost:8080/number/5, they'll be served the content from
        #   localhost:8080/count/5, but the url will remain as /number/5
        rewrite ^/number/(\w+) /count/$1;
    }
}

events {

}